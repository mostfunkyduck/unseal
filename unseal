#!/bin/bash
set -e

usage() {
  >&2 echo
  >&2 echo "$0: runs a given command after decrypting a configuration file beforehand"
  >&2 echo
  >&2 echo 'decrypted configuration will be stored on disk with 0600 permissions during execution and then re-encrypted afterwards'
  >&2 echo 'this allows editing the configuration through the command and having those changes persist in the encrypted file'
  >&2 echo
  >&2 echo 'Usage:'
  >&2 echo
  >&2 echo "$0 <configuration file> <command> [arguments...]"
  >&2 echo
}

checkDependencies() {
  if ! command -v gpg &>/dev/null; then
    >&2 echo "$0: gpg is not installed, cannot proceed"
    exit 1
  fi
}

# outputs decrypted contents of a given file
# user will have to mash in a passphrase for gpg
decrypt() {
  local file
  file=$1
  if [ -z "$file" ]; then
    >&2 echo "$0: please specify a configuration file to decrypt"
    >&2 echo
    usage
    exit 1
  fi

  gpg --decrypt --openpgp --skip-verify -q "$file"
}

# will encrypt a file, user will be prompted for which recipient and all that
encrypt() {
  local file
  local extension
  local tmpFileName
  file=$1
  extension=$2
  if [ -z "$file" ]; then
    >&2 echo "$0: please specify a file to encrypt"
    >&2 echo
    usage
    exit 1
  fi

  [ -z "$extension" ] && extension="pgp"
  tmpFileName="$(mktemp)"
  # make a new copy in case gpg fails and corrupts the existing one
  gpg --encrypt --openpgp -q --yes -o "$tmpFileName" "$file"

  # now that we know gpg isn't failing, copy the new one to the location of the old one
  mv "$tmpFileName" "${file}.${extension}"
}

execute() {
  local configurationFile
  local decryptedLocation
  local cmdWithArgs
  local extension

  configurationFile=$1
  shift
  cmdWithArgs=$*

  extension="${configurationFile##*.}"

  if [ "$extension" != 'gpg'  ] && [ "$extension" != 'pgp' ]; then
    >&2 echo "$0: encrypted configuration file '$configurationFile' did not have .gpg or .pgp extension (had '$extension')!"
    exit 1
  fi
  decryptedLocation=${configurationFile%.*}

  if [ -f "$decryptedLocation" ]; then
    echo "$0: decrypted version of file already exists at '$decryptedLocation' ! will exit instead of overwriting"
    exit 1
  fi

  # create the target location and give it secure permissions
  touch "$decryptedLocation"

  chown "$USER:$USER" "$decryptedLocation"
  chmod 0600 "$decryptedLocation"

  if ! decrypt "$configurationFile" > "$decryptedLocation"; then
    echo "$0: decryption failed!"
    rm "$decryptedLocation"
    exit 1
  fi

  # shellcheck disable=SC2064
  trap "encrypt $decryptedLocation $extension || true; rm $decryptedLocation" EXIT
  $cmdWithArgs
}

if [ $# -lt 2 ]; then
  usage
  exit 1
fi
checkDependencies
execute "$@"
