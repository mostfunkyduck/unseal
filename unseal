#!/bin/bash
set -e

usage() {
  >&2 echo
  >&2 echo "$0: runs a given command after decrypting a configuration file beforehand"
  >&2 echo
  >&2 echo 'decrypted configuration will be stored on disk with 0600 permissions during execution and then re-encrypted afterwards'
  >&2 echo 'this allows editing the configuration through the command and having those changes persist in the encrypted file'
  >&2 echo
  >&2 echo 'Usage:'
  >&2 echo
  >&2 echo "$0 <configuration file> <command> [arguments...]"
  >&2 echo
}

checkDependencies() {
  if ! command -v gpg &>/dev/null; then
    >&2 echo 'gpg is not installed, cannot proceed'
    exit 1
  fi
}

# outputs decrypted contents of a given file
# user will have to mash in a passphrase for gpg
decrypt() {
  local file
  local dir
  file=$1
  if [ -z "$file" ]; then
    >&2 echo 'please specify a configuration file to decrypt'
    >&2 echo
    usage
    exit 1
  fi

  gpg --decrypt -q "$file"
}

# will encrypt a file, user will be prompted for which recipient and all that
encrypt() {
  local file
  local dir
  local fname
  file=$1
  if [ -z "$file" ]; then
    >&2 echo 'please specify a file to encrypt'
    >&2 echo
    usage
    exit 1
  fi
  # gpgtar doesn't consistently work, so we do it by hand
  if [ -d "$file" ]; then
    dir="$(dirname "$file")"
    fname="$(basename "$file")"
    tar -C "$dir" -cvf "${fname}.tar" "$file" &>/dev/null || true
    rm -fr "$file"
    file="$fname"
  fi
  gpg --encrypt -q --yes "${file}"
}

execute() {
  local dir
  local configurationFile
  local decryptedLocation
  local cmdWithArgs
 
  configurationFile=$1
  shift
  cmdWithArgs=$*
  if [ "${configurationFile: -4}" != '.gpg'  ]; then
    >&2 echo 'encrypted configuration file did not have .gpg extension!'
    exit 1
  fi
  dir=$(dirname "$configurationFile")
  decryptedLocation=${configurationFile%.gpg}
  decrypt "$configurationFile" > "$decryptedLocation"
  tar -C "$dir" -xvf "$decryptedLocation" &>/dev/null || true # may not be a tar
  # shellcheck disable=SC2064
  trap "encrypt $decryptedLocation || true; rm $decryptedLocation; rm -fr ${decryptedLocation%.tar}" EXIT
  $cmdWithArgs
}

if [ $# -lt 2 ]; then
  usage
  exit 1
fi
checkDependencies
execute "$@"
